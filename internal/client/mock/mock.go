// Code generated by MockGen. DO NOT EDIT.
// Source: hotelbeds.go
//
// Generated by this command:
//
//	mockgen -source=hotelbeds.go -destination=./mock/mock.go -package=hotelbedsmock
//

// Package hotelbedsmock is a generated GoMock package.
package hotelbedsmock

import (
	context "context"
	client "lite-api/internal/client"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHotelBeds is a mock of HotelBeds interface.
type MockHotelBeds struct {
	ctrl     *gomock.Controller
	recorder *MockHotelBedsMockRecorder
}

// MockHotelBedsMockRecorder is the mock recorder for MockHotelBeds.
type MockHotelBedsMockRecorder struct {
	mock *MockHotelBeds
}

// NewMockHotelBeds creates a new mock instance.
func NewMockHotelBeds(ctrl *gomock.Controller) *MockHotelBeds {
	mock := &MockHotelBeds{ctrl: ctrl}
	mock.recorder = &MockHotelBedsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHotelBeds) EXPECT() *MockHotelBedsMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockHotelBeds) Search(arg0 context.Context, arg1 client.SearchRequest) (client.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(client.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockHotelBedsMockRecorder) Search(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockHotelBeds)(nil).Search), arg0, arg1)
}
