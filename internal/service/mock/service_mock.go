// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mock/mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	dto "lite-api/internal/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDTOService is a mock of DTOService interface.
type MockDTOService struct {
	ctrl     *gomock.Controller
	recorder *MockDTOServiceMockRecorder
}

// MockDTOServiceMockRecorder is the mock recorder for MockDTOService.
type MockDTOServiceMockRecorder struct {
	mock *MockDTOService
}

// NewMockDTOService creates a new mock instance.
func NewMockDTOService(ctrl *gomock.Controller) *MockDTOService {
	mock := &MockDTOService{ctrl: ctrl}
	mock.recorder = &MockDTOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDTOService) EXPECT() *MockDTOServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockDTOService) Search(ctx context.Context, request dto.SearchRequest) (dto.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, request)
	ret0, _ := ret[0].(dto.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockDTOServiceMockRecorder) Search(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDTOService)(nil).Search), ctx, request)
}
